
==Basis for Stars! Nova style==

Style in Stars! Nova source code is based on the msdn standard as enforced by StyleCop, with the following exceptions:

* SA1310: Field names must not contain underscores. Conflicts with the standard way VS generates event methods: i.e. ObjectName_Event().
* SA1101: Prefix local calls with "this.". Not used as it is redundant.
* SA1120: Disallow empty comments. This is incompatable with automatically generated form code.
* SA1122: Use string.Empty for empty strings. There is no real technical difference between string.Empty and "" anymore (in .NET 1.0/1.1 there was) so SA1122 was ignored. However string.Empty and "" should not be used for string comparisons. Use string.Length == 0 or string.IsNullOrEmpty().
* SA1600-1602: Elements, partial elements and enumeration items must be documented. This is excessive where good naming is used. These items may be commented.

* SA1633-1635, 1637-1640: All the rules regarding file headers???

Top of each file must contain the Copyright Notice:

  #region Copyright Notice
  // ============================================================================
  // Copyright (C) 2008 Ken Reed
  // Copyright (C) 2009, 2010, 2011 stars-nova
  //
  // This file is part of Stars-Nova.
  // See <http://sourceforge.net/projects/stars-nova/>;.
  //
  // This program is free software; you can redistribute it and/or modify
  // it under the terms of the GNU General Public License version 2 as
  // published by the Free Software Foundation.
  //
  // This program is distributed in the hope that it will be useful,
  // but WITHOUT ANY WARRANTY; without even the implied warranty of
  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  // GNU General Public License for more details.
  //
  // You should have received a copy of the GNU General Public License
  // along with this program. If not, see <http://www.gnu.org/licenses/>;
  // ===========================================================================
  #endregion

Code sourced elsewhere must state clearly in the header the source and licence terms.

The "Module Description" which appears at the top of many files is now depreciated. Use the class summary now that we (mostly) have only one class per file.

==Naming Convention==
* Variables, Members, Arguments: camelCase
* Methods, Types, Properties: PascalCase 
* No underscores unless autogenerated by VS. 
* No "this" prefix. 
* Replace public variables with Properties as we find them and don't use public fields anymore. 

==Other Formating==
* Multiple whitespaces allowed but not enforced. Use only when it improves readability and this does not include extra space between operators and parenthesis. 
* Region is only to be used for the Copyright Notice, at the beginning of every file. 
* standarized class structuring to help find and organize things. 
  Class 
  {
    private members; 
    events declarations; 
    properties; 
    construction/disposal; 
    methods; 
    event handlers; 
  }

==Indenting==

Use Visual Studio defaults for indenting. This can be acheived by cutting an object or function and then pasting it back in (Ctrl-X, Ctrl-v). 

==Event Functions==

Event functions should include the following parameter descriptions:

        /// <param name="sender">The source of the event.</param>
        /// <param name="e">A <see cref="EventArgs"/> that contains the event data.</param>


==Types in Function Headers==
When refering to types in function headers, use the 'see cref=""' form:

        /// <param name="star">The <see cref="Star"/> being reported.</param>


==Xml Serialisation Functions==
Use this format for function headers:

FromXml() - implemented as an initialising constructor

        /// <summary>
        /// Load from XML: Initialising constructor from an XML node.
        /// </summary>
        /// <param name="node">An <see cref="XmlNode"/> within
        /// a Nova compenent definition file (xml document).
        /// </param>

ToXml()

        /// <summary>
        /// Save: Serialise this property to an <see cref="XmlElement"/>.
        /// </summary>
        /// <param name="xmldoc">The parent <see cref="XmlDocument"/>.</param>
        /// <returns>An <see cref="XmlElement"/> representation of the Property.</returns>




