// ============================================================================
// Nova. (c) 2008 Ken Reed
// (c) 2009, 2010 stats-nova
//
// This module is invoked (once) when a new turn has been received from the
// Nova Console. All the appropriate fields in the GUI state data are updated
// that are relevant to the player's selected race.
//
// This is free software. You can redistribute it and/or modify it under the
// terms of the GNU General Public License version 2 as published by the Free
// Software Foundation.
// ============================================================================

using System;
using System.IO;
using System.Collections;
using System.Runtime.Serialization.Formatters.Binary;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization;

using NovaCommon;

namespace NovaClient
{
 
// ============================================================================
// Class to deal with the input turn data
// ============================================================================

   public static class IntelReader
   {
      private static Intel TurnData  = null;
      private static ClientState   StateData = null;

      /// <summary>
      /// Read and process the <RaceName>.Intel generated by the Nova
      /// Console. 
      /// This file must be present before the GUI will run, since it
      /// contains key data, such as the race name, as well as any information about
      /// events that happend in the previous game year (battles, mine hits, etc. 
      /// It is also used for a kind of boot strapping process as there may or may not
      /// be a <RaceName>.state file to load:
      /// 1. open the .intel and determine the race, and hence the name of any .state file.
      /// 2. open the .state file, if any. This contains any historical information, 
      ///    and is used to reconstruct the ClientState.Data (we can create a new one with 
      ///    no history if required, such as on the first turn)
      /// 3. process the .intel file to update the ClientState.Data
      ///
      /// Note that this file is not read again after the first time a new turn is
      /// received. Once fully loaded all further processing is done using 
      /// ClientState.Data (which is subsequently used to generate <RaceName>.orders.
      /// </summary>
      /// <param name="turnFileName">Path and file name of the RaceName.intel file.</param>

      public static void ReadIntel(String turnFileName)
      {
          if (File.Exists(turnFileName) == false)
          {
              Report.FatalError
              ("The Nova GUI cannot start unless a turn file is present");
          }

          using (Stream turnFile = new FileStream(turnFileName, FileMode.Open))
          {
              int turnYearInFile = (int)Serializer.Deserialize(turnFile);


              // check this is a new turn, not the one just played
              if (turnYearInFile != ClientState.Data.TurnYear)
              {
                  Intel newIntel = Serializer.Deserialize(turnFile)
                                            as Intel;
                  ClientState.Data.RaceName = newIntel.MyRace.Name;
                  ClientState.Data.GameFolder = Path.GetDirectoryName(turnFileName);
                  ClientState.Restore();
                  ClientState.Data.InputTurn = newIntel;
                  ProcessIntel();

              }
              else
              {
                  // exit without saving any files
                  throw new System.Exception("Turn Year missmatch");
              }
          }
      }


      /// <summary>
      /// This function processes the ClientState.Data.TurnData for this turn
      /// and updates the ClientState.Data.
      /// </summary>
      public static void ProcessIntel()
      {
         StateData = ClientState.Data;

          // copy the raw data from the intel to StateData
         TurnData  = StateData.InputTurn;
         StateData.TurnYear = TurnData.TurnYear;
         StateData.PlayerRace = TurnData.MyRace;

          // Clear old turn data from StateData
         StateData.DeletedFleets.Clear();
         StateData.DeletedDesigns.Clear();
         StateData.Messages.Clear();
         
          // Process the new intel
         DetermineOrbitingFleets();
         DeterminePlayerStars();
         DeterminePlayerFleets();

         ProcessMessages();
         ProcessFleets();
         ProcessReports();
         ProcessResearch();
      }


// ============================================================================
// Process Messages
//
// Run through the full list of messages and populate the message store in the
// state data with the messages relevant to the player's selected race. The
// actual message control will be populated within the main window
// initialisation.
// ============================================================================

      private static void ProcessMessages()
      {
         foreach (Message message in TurnData.Messages) {
            if ((message.Audience == ClientState.Data.RaceName) ||
                (message.Audience == "*")) {
               StateData.Messages.Add(message);
            }
         }
      }


// ============================================================================
// So that we can put an indication of fleets orbiting a star run through all
// the fleets and, if they are in orbit around a star, set the OrbitingFleets
// flag in the star.
// ============================================================================

      private static void DetermineOrbitingFleets()
      {
         foreach (Star star in TurnData.AllStars.Values) {
            star.OrbitingFleets = false;
         }

         foreach (Fleet fleet in TurnData.AllFleets.Values) {
            if (fleet.InOrbit != null && fleet.Type != "Starbase") {
               Star star           = fleet.InOrbit;
               star.OrbitingFleets = true;
            }
         }
      }


// ============================================================================
// Process Reports
//
// Advance the age of all star reports by one year. Then, if a star is owned by
// us and has colonists bring the report up to date (just by creating a new
// report).
// ============================================================================

      private static void ProcessReports()
      {
         foreach (StarReport report in StateData.StarReports.Values) {
            report.Age++;
         }

         foreach (Star star in StateData.PlayerStars) {
            if (star.Colonists != 0) {
               StateData.StarReports[star.Name] = new StarReport(star);
            }
         }
      }


      /// <summary>
      ///  Process Fleet Reports
      /// </summary>
      private static void ProcessFleets()
      {
         foreach (Fleet fleet in StateData.PlayerFleets) {

            if ((fleet.InOrbit != null) && (fleet.LongRangeScan != 0)) {
               Star star = fleet.InOrbit;
               StateData.StarReports[star.Name] = new StarReport(star);
            }
                  
            if (fleet.ShortRangeScan != 0) {
               foreach (Star star in TurnData.AllStars.Values) {
                  if (PointUtilities.Distance(star.Position, fleet.Position)
                      < fleet.ShortRangeScan) {
                     StateData.StarReports[star.Name] = new StarReport(star);
                  }
               }
            }
         }
      }


      /// <summary>
      /// Do the research for this year. Research is performed locally once per turn.
      /// </summary>
      /// <remarks>
      /// FIXME (priority 4) Console should determine the results of research and tell
      /// the Nova GUI, not the other way around.      
      /// </remarks>
      private static void ProcessResearch()
      {
          TechLevel.ResearchField area = StateData.ResearchTopic;
          int areaResource = (int)StateData.ResearchResources[area];
          int areaLevel = (int)StateData.ResearchLevel[area];
          areaResource += (int)StateData.ResearchAllocation;

          StateData.ResearchAllocation = 0;
          StateData.ResearchResources[area] = areaResource;

          while (true)
          {
              if (areaResource >= Research.Cost(areaLevel + 1))
              {
                  areaLevel++;
                  ReportLevelUpdate(area, areaLevel);
              }
              else
              {
                  break;
              }
          }
      }


// ============================================================================
// Report an update in tech level and any new components that have became
// available.
// ============================================================================

      private static void ReportLevelUpdate(TechLevel.ResearchField area, int level)
      {
          Message techAdvanceMessage =
              new Message(ClientState.Data.RaceName, null, "Your race has advanced to Tech Level "
              + level + " in the " + StateData.ResearchTopic + " field");
          StateData.Messages.Add(techAdvanceMessage);

          Hashtable allComponents = AllComponents.Data.Components;
          TechLevel oldResearchLevel = StateData.ResearchLevel;
          TechLevel newResearchLevel = new TechLevel(oldResearchLevel);

          newResearchLevel[area] = level;

          foreach (Component component in allComponents.Values)
          {
              if (component.RequiredTech > oldResearchLevel &&
                  component.RequiredTech <= newResearchLevel)
              {

                  ClientState.Data.AvailableComponents.Add(component);
                  Message newComponentMessage =
                      new Message(ClientState.Data.RaceName, null, "You now have available the "
                      + component.Name + " " + component.Type + " component");
                  ClientState.Data.Messages.Add(newComponentMessage);
              }
          }

          StateData.ResearchLevel = newResearchLevel;
      }


// ============================================================================
// Determine the fleets owned by the player (this is a convenience function so
// that buttons such as "Next" and "Previous" on the ship detail panel are easy
// to code,
// ============================================================================

      private static void DeterminePlayerFleets()
      {
         StateData.PlayerFleets.Clear();

         foreach (Fleet fleet in TurnData.AllFleets.Values) {
            if (fleet.Owner == StateData.RaceName) {
               if (fleet.Type != "Starbase") {
                  StateData.PlayerFleets.Add(fleet);
               }
            }
         }
      }


// ============================================================================
// Determine the star systems owned by the player (this is a convenience
// function so that buttons such as "Next" and "Previous" on the star detail
// panel are easy to code,
// ============================================================================

      private static void DeterminePlayerStars()
      {
         StateData.PlayerStars.Clear();

         foreach (Star star in TurnData.AllStars.Values) {
            if (star.Owner == StateData.RaceName) {
               StateData.PlayerStars.Add(star);
            }
         }
      }

   }
}
